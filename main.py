import asyncio
import random
import os
from gtts import gTTS
import requests
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command

from aiogram.types import Message, FSInputFile, CallbackQuery
from consts import TOKEN, WEATHER_TOKEN
import  keyboards as kb
from googletrans import Translator


bot = Bot(TOKEN)
dp = Dispatcher()
translator = Translator()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city,
        "appid": WEATHER_TOKEN,
        "units": "metric",
        "lang": "ru"
    }
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if data["cod"] != 200:
            return f"–û—à–∏–±–∫–∞: {data['message']}"
        weather_description = data["weather"][0]["description"].capitalize()
        temperature = data["main"]["temp"]
        feels_like = data["main"]["feels_like"]
        humidity = data["main"]["humidity"]
        wind_speed = data["wind"]["speed"]

        return (
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ <b>{city}</b>:\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
            f"ü§ó –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
            f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {weather_description}"
        )
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"



@dp.callback_query(F.data == "news")
async def news(callback: CallbackQuery):
    await callback.answer("–ù–æ–≤–æ—Å—Ç–∏ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è", show_alert=True)
    await callback.message.edit_text('–í–æ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!', reply_markup=await kb.test_keyboard())


@dp.message(Command('audio'))
async def audio(message: types.Message):
    await bot.send_chat_action(message.chat.id, 'upload_audio')
    audio = FSInputFile('audio.m4a')
    await bot.send_audio(message.chat.id, audio)
@dp.message(Command('video'))
async def video(message: types.Message):
    await bot.send_chat_action(message.chat.id, 'upload_video')
    video = FSInputFile('video.mp4')
    await bot.send_video(message.chat.id, video)

@dp.message(Command('voice'))
async def voice(message: types.Message):
    voice = FSInputFile("sample.ogg")
    await message.answer_voice(voice)

@dp.message(Command('doc'))
async def doc(message: types.Message):
    doc = FSInputFile("tgo2.pdf")
    await bot.send_document(message.chat.id, doc)

@dp.message(Command('traning'))
async def training(message: Message):
    training_list = [
       "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1:\n1. –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n2. –í–µ–ª–æ—Å–∏–ø–µ–¥: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–∫–∞–∂–¥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)\n3. –ü–ª–∞–Ω–∫–∞: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 30 —Å–µ–∫—É–Ω–¥",
       "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 2:\n1. –ü–æ–¥—ä–µ–º—ã –Ω–æ–≥: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n2. –†—É—Å—Å–∫–∏–π —Ç–≤–∏—Å—Ç: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–∫–∞–∂–¥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)\n3. –ü–ª–∞–Ω–∫–∞ —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 —Å–µ–∫—É–Ω–¥ (–∫–∞–∂–¥–∞—è –Ω–æ–≥–∞)",
       "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 3:\n1. –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è —Å –ø–æ–¥–Ω—è—Ç—ã–º–∏ –Ω–æ–≥–∞–º–∏: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n2. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–æ–∂–Ω–∏—Ü—ã: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π \n3. –ë–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 —Å–µ–∫—É–Ω–¥ (–∫–∞–∂–¥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)"
    ]
    rand_tr = random.choice(training_list)
    await message.answer(f"–≠—Ç–æ –≤–∞—à–∞ –º–∏–Ω–∏-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: \n {rand_tr}")
    tts = gTTS(rand_tr, lang="ru")
    tts.save("training.ogg")
    await bot.send_voice(message.chat.id, FSInputFile("training.ogg"))
    os.remove('training.ogg')



@dp.message(Command('weather'))
async def weather_command(message: types.Message):
    command = message.text.strip()
    parts = command.split(" ", 1)

    if len(parts) < 2:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞"
        )
        return

    city = parts[1].strip()
    weather_info = get_weather(city)
    await message.reply(weather_info, parse_mode='HTML')


@dp.message(Command('photo'))
async def photo(message: Message):
    list = ['https://cs6.livemaster.ru/storage/47/1f/e6c1defa8ea4fc9293081373656a.jpg',
            'https://cs6.livemaster.ru/storage/51/8d/e9304e78c01418b5ea956d3be36a.jpg',
            'https://cs6.livemaster.ru/storage/f1/a7/378d36a85b8e6cab15c48e25026a.jpg',
            'https://cs3.livemaster.ru/zhurnalfoto/d/a/1/150404091759.jpeg',
            'https://i.cdn01.ru/files/users/images/a0/9c/a09c2c96ab8ce875ae85ee5cfb2c0d52.jpg',
            'https://i.cdn01.ru/files/users/images/62/67/6267b7e32ed5aff57c00b0532e6af910.jpg']
    rand_photo = random.choice(list)
    await message.answer_photo(rand_photo, caption='–≠—Ç–æ —Å—É–ø–µ—Ä –∫–æ—Ç')

@dp.message(F.photo)
async def react_photo(message: Message):
    list = ['–û–≥–æ!', 'Cool!','–§—É –±—è–∫–∞','–ö–∞–∫–∞ –±—è–∫–∞ –±–µ–µ','–ö—Ä–∞—Å–æ—Ç–∞ - —Å—Ç—Ä–∞—à–Ω–∞—è —Å–∏–ª–∞!']
    rand_answ = random.choice(list)
    await message.answer(rand_answ)
    await bot.download(message.photo[-1],destination=f'img/{message.photo[-1].file_id}.jpg')


@dp.message(F.text=='–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò')
async def aitext(message: Message):
    await message.answer('–ò–ò - —ç—Ç–æ –¥–æ—Ö –∏ –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ –∞–∞–∞')


@dp.message(F.text == '–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ 1')
async def button1_text(message: Message):
    await message.answer('–∫–Ω–æ–ø–∫–∞ 1 –Ω–∞–∂–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ. –û—Ä–µ—à–Ω–∏–∫ —É–∂–µ –ª–µ—Ç–∏—Ç')


@dp.message(Command('help'))
async def help(message: Message):
    await message.answer('–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã \n /start  \n /help \n /photo \n /weather \n –ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò')


@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!", reply_markup=kb.inline_keyboard_test)

@dp.message()
async def translate_text(message: types.Message):
    try:
        translation = translator.translate(message.text, dest='en')
        await message.reply(translation.text)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")
async def main(dispatcher):
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main(dp))